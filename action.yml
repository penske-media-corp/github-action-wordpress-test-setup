name: 'Set up common workflow requirements'
description: 'Prepare environment for testing a WordPress plugin or theme'
inputs:
  bitbucket_read_only_ssh_key:
    description: 'Read-only SSH key to access repositories on Bitbucket'
    required: true
  git_checkout_fetch_depth:
    description: 'Fetch depth for git checkout'
    required: false
    default: '1'
  github_read_only_ssh_key:
    description: 'Read-only SSH keyto access repositories on GitHub'
    required: true
  nodejs:
    description: 'Prepare environment for Node.js'
    required: false
    default: '0'
  php_version:
    description: 'PHP version to use'
    required: false
    default: '7.4'
  phpcs:
    description: 'Prepare environment for PHPCS'
    required: false
    default: '0'
  phpunit:
    description: 'Prepare environment for PHPUnit'
    required: false
    default: '0'
  VIP_THEME:
    description: 'If the theme is a vip theme'
    required: true
    type: boolean
  wordpress_version:
    description: ''
    required: false
    default: '0'
runs:
  using: "composite"
  steps:
    # Shared steps

    - name: Check out repository
      uses: actions/checkout@v3
      with:
        fetch-depth: ${{ inputs.git_checkout_fetch_depth }}
        ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

    - name: Prepare SSH keys
      run: |
        echo 'BITBUCKET_READ_ONLY_SSH_KEY<<EOF' >> $GITHUB_ENV
        echo "${{ inputs.bitbucket_read_only_ssh_key }}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

        echo 'GITHUB_READ_ONLY_SSH_KEY<<EOF' >> $GITHUB_ENV
        echo "${{ inputs.github_read_only_ssh_key }}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
      shell: bash

    - name: Set up SSH
      run: ${{ github.action_path }}/scripts/set-up-ssh.sh
      shell: bash

    - name:  Add shared utilities
      run: |
        ${{ github.action_path }}/scripts/add-shared-utilities.sh

        echo "${{ github.action_path }}/bin" >> $GITHUB_PATH
      shell: bash

    - name: Set environment variables
      run: |
        # For back-compat reasons, this references Bitbucket. Once all repos are moved, we can update references to this.
        # Additionally, for "pull request" events, the `$GITHUB_REF_NAME` variable does not match the branch name.
        FULL_PATH_REF="${{ github.event.pull_request.head.ref || github.ref }}"
        REF=${FULL_PATH_REF#refs\/heads\/}
        echo "BITBUCKET_BRANCH=${REF}" >> $GITHUB_ENV

        # Set certain static environment variables.
        echo "PMC_COMMIT_DIFF_FILE=${RUNNER_TEMP}/diff.txt" >> $GITHUB_ENV
        echo "PMC_DIFF_ONLY=true" >> $GITHUB_ENV
        echo "PMC_SKIP_INIT_BUILD=true" >> $GITHUB_ENV

        # Parse repository slug for use in various commands.
        . pmc-setup-git-repo-slug
        echo "REPO_SLUG=${REPO_SLUG}" >> $GITHUB_ENV

        # Determine if we're testing `pmc-plugins`, as it has special requirements.
        PMC_IS_PMC_PLUGINS=''
        if [[ "pmc-plugins" == "${REPO_SLUG}" ]]; then
          PMC_IS_PMC_PLUGINS=true
        fi
        echo "PMC_IS_PMC_PLUGINS=${PMC_IS_PMC_PLUGINS}" >> $GITHUB_ENV

        # Set VIP_THEME variable
        echo "VIP_THEME=${{ inputs. VIP_THEME }}" >> $GITHUB_ENV
      shell: bash

    - name: Set environment variables to install WordPress
      if: ${{ inputs.wordpress_version != '0' }}
      run: bash ${{ github.action_path }}/scripts/set-wordpress-envars.sh
      shell: bash

    - name: Set WordPress version cache key and cache path
      id: set-wp-install-cache-info
      if: ${{ inputs.wordpress_version != '0' }}
      run: |
        echo "::set-output name=path::${TMPDIR}/wp"

        if [[ "${{ matrix.wordpress }}" == 'latest' ]]; then
          echo "::set-output name=version::$(curl https://api.wordpress.org/core/version-check/1.7/ | jq -r '.offers[0].version')"
        else
          echo "::set-output name=version::$(/bin/date -u "+%F")"
        fi
      shell: bash

    - name: Cache WordPress install
      id: cache-wordpress-install
      if: ${{ inputs.wordpress_version != '0' }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.set-wp-install-cache-info.outputs.path }}
        key: ${{ runner.os }}-version-${{ steps.set-wp-install-cache-info.outputs.version }}-php-${{ matrix.php }}-wp-${{ matrix.wordpress }}-wordpress-install

    - name: Start MySQL
      id: start-mysql
      if: ${{ inputs.wordpress_version != '0' }}
      run: |
        MYSQL_USER=root
        MYSQL_PASSWORD=root
        MYSQL_HOST=127.0.0.1
        MYSQL_DATABASE=wordpress

        sudo systemctl start mysql.service

        echo "::set-output name=user::${MYSQL_USER}"
        echo "::set-output name=password::${MYSQL_PASSWORD}"
        echo "::set-output name=host::${MYSQL_HOST}"
        echo "::set-output name=database::${MYSQL_DATABASE}"

        # If WP wasn't installed, ensure database exists.
        if [[ "${{ steps.cache-wordpress-install.outputs.cache-hit }}" == true ]]; then
          mysql --user=${MYSQL_USER} --password=${MYSQL_PASSWORD} --host=${MYSQL_HOST} --protocol=tcp "--execute=CREATE DATABASE IF NOT EXISTS ${MYSQL_DATABASE};"
        fi
      shell: bash

    - name: Install WordPress
      if: ${{ inputs.wordpress_version != '0' && steps.cache-wordpress-install.outputs.cache-hit != 'true' }}
      run: |
        SCRIPT_PATH="/usr/local/bin/install-wp-tests"
        curl -o "${SCRIPT_PATH}" https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh
        chmod +x "${SCRIPT_PATH}"
        "${SCRIPT_PATH}" ${{ steps.start-mysql.outputs.database }} ${{ steps.start-mysql.outputs.user }} ${{ steps.start-mysql.outputs.password }} ${{ steps.start-mysql.outputs.host }} ${{ matrix.wordpress }}
      shell: bash

    - name: Create plugin loader
      if: ${{ inputs.wordpress_version != '0' }}
      run: cp "${{ github.action_path }}/templates/plugin-loader.php" "${RUNNER_TEMP}"
      shell: bash

    - name: Install WordPress dependencies
      if: ${{ inputs.wordpress_version != '0' }}
      run: ${{ github.action_path }}/scripts/set-up-wordpress-dependencies.sh
      shell: bash

    # Prepare for PHPCS or PHPUnit

    - name: Determine PHP coverage mode
      id: php-coverage-mode
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      run: |
        if [[ '${{ inputs.phpunit }}' == '1' ]]; then
          echo "::set-output name=mode::xdebug"
        else
          echo "::set-output name=mode::none"
        fi
      shell: bash

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      with:
        php-version: ${{ inputs.php_version }}
        coverage: ${{ steps.php-coverage-mode.outputs.mode }}
        tools: composer:1

    - name: Log debug information
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      run: php --version
      shell: bash

      # This date is used to ensure that caches are cleared weekly.
      # http://man7.org/linux/man-pages/man1/date.1.html
    - name: Get last Monday's date
      id: get-date
      if: ${{ inputs.phpcs == 1 || inputs.phpunit == 1 || inputs.nodejs == 1 }}
      run: echo "::set-output name=date::$(/bin/date -u --date='last Sun' "+%F")"
      shell: bash

    - name: Get composer global path
      id: composer-global-path
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      run: echo "::set-output name=path::$(composer config home)"
      shell: bash

    - name: Ensure composer global bin is in path
      id: composer-global-bin-path
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      run: echo "$(composer config home)/$(composer config bin-dir)" >> $GITHUB_PATH
      shell: bash

    - name: Cache global composer dependencies
      id: composer-cache-global
      if: ${{ inputs.phpcs == '1' || inputs.phpunit == '1' }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.composer-global-path.outputs.path }}
        key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-php-${{ inputs.php_version }}-phpcs-${{ inputs.phpcs }}-phpunit-${{ inputs.phpunit }}-composer-global

    - name: Install diffFilter
      if: ${{ ( inputs.phpcs == '1' || inputs.phpunit == '1' ) && steps.composer-cache-global.outputs.cache-hit != 'true' }}
      run: composer global require exussum12/coverage-checker
      shell: bash

    # Prepare for PHPUnit

    - name: Install PHPUnit
      if: ${{ inputs.phpunit == '1' && steps.composer-cache-global.outputs.cache-hit != 'true' }}
      run: |
        if [[ $(php -v) =~ "PHP 8." ]]; then
          composer global require "phpunit/phpunit=9.*"
        elif [[ $(php -v) =~ "PHP 7." ]]; then
          composer global require "phpunit/phpunit=7.*"
        fi

        composer global require yoast/phpunit-polyfills
      shell: bash

    - name: Log PHPUnit debug information
      if: ${{ inputs.phpunit == '1' }}
      run: phpunit --version
      shell: bash

    - name: Set unit-test constants
      if: ${{ inputs.phpunit == '1' }}
      run: |
        WP_CONFIG_PATH="${WP_TESTS_DIR}/wp-tests-config.php"

        echo "define( 'IS_UNIT_TEST', true );" >> "${WP_CONFIG_PATH}"

        sed -i 's/example\.org/pmcdev\.local/g' "${WP_CONFIG_PATH}"
      shell: bash

    # Prepare for PHPCS

    - name: Install PHPCS and PMC standards
      if: ${{ inputs.phpcs == '1' }}
      run: |
        git clone --depth 1 git@bitbucket.org:penskemediacorp/pmc-codesniffer.git "${RUNNER_TEMP}/phpcs"
        composer --working-dir="${RUNNER_TEMP}/phpcs" install
        echo "${RUNNER_TEMP}/phpcs/vendor/bin" >> $GITHUB_PATH
      shell: bash

    - name: Log PHPCS debug information
      if: ${{ inputs.phpcs == '1' }}
      run: |
        phpcs -i
        phpcs --config-show
      shell: bash

    # Prepare for Node.js

    - name: Set nvm-versions cache path
      id: set-nvm-cache-info
      if: ${{ inputs.nodejs == 1 }}
      run: echo "::set-output name=path::${NVM_DIR}/versions"
      shell: bash

    - name: Cache nvm versions
      id: cache-nvm-versions
      if: ${{ inputs.nodejs == 1 }}
      uses: actions/cache@v3
      with:
        path: ${{ steps.set-nvm-cache-info.outputs.path }}
        key: ${{ runner.os }}-nvm-versions-${{ steps.get-date.outputs.date }}
