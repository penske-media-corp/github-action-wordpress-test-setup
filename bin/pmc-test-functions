#!/bin/bash

. pmc-functions

function git_switch_to_master_if_branch_not_exist {
	local BRANCH="$1"
	local FOLDER="$2"

	if [[ -n "${FOLDER}" ]]; then
		pushd ${FOLDER} 2>&1 > /dev/null
	fi

	if [[ -d .git ]]; then
		GIT_REMOTE="$(git remote -v | grep -m 1 -E "origin.*fetch" | sed -e 's/\t/ /g' -e 's/\s+/ /g' | cut -d' ' -f2)"
		REMOTE_BRANCH="$(git ls-remote --heads ${GIT_REMOTE} 2>/tmp/stderr | grep -Ei "heads/${BRANCH}\$" | awk -F'refs/heads/' '{ print $2 }')"
		git fetch
		if [[ -n "${REMOTE_BRANCH}" ]]; then
			git checkout ${BRANCH}
		else
			git checkout $(pmc_get_git_default_branch ${GIT_REMOTE})
		fi
		git pull
	fi

	if [[ -n "${FOLDER}" ]]; then
		popd 2>&1 > /dev/null
	fi

}

function maybe_switch_branch_for_testing_theme {
	local THEME="$1"
	local BRANCH="$2"

	export WP_THEME_PARENT=
	export WP_THEME_PARENT_BRANCH=
	export PMC_PLUGINS_BRANCH=

	if [[ -z "${BRANCH}" ]]; then
		if [[ -n "${THEME}" && "." != "${THEME}" ]]; then
			if [[ ! -d ${WP_THEME_FOLDER}/${THEME}/.git || ! -f ${WP_THEME_FOLDER}/${THEME}/style.css ]]; then
				return
			fi
			pushd ${WP_THEME_FOLDER}/${THEME} 2>&1 > /dev/null
			BRANCH="$(git rev-parse --abbrev-ref HEAD)"
			popd 2>&1 > /dev/null
		elif [[ -d .git && -f style.css ]]; then
			BRANCH="$(git rev-parse --abbrev-ref HEAD)"
		fi
	fi

	if [[ -z "${BRANCH}" ]]; then
		return;
	fi

	# Detecting wp parent theme
	echo "Detecting parent theme: ${THEME}"
	export WP_THEME_PARENT="$(get_parent_wp_theme "${THEME}")"

	# Detect wp parent theme matching branch
	if [[ -n "${WP_THEME_PARENT}" ]]; then
		echo "Switch branch '${BRANCH}' on parent theme '${WP_THEME_PARENT}'"
		pushd ${WP_THEME_FOLDER}/${WP_THEME_PARENT} 2>&1 > /dev/null
		git_switch_to_master_if_branch_not_exist "${BRANCH}"

		export WP_THEME_PARENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"

		popd 2>&1 > /dev/null
	fi

	# Detect pmc-plugin matching branch
	if [[ -d ${WEB_ROOT}/wp-content/plugins/pmc-plugins ]]; then
		echo "Switch branch '${BRANCH}' on 'pmc-plugins'"
		pushd ${WEB_ROOT}/wp-content/plugins/pmc-plugins 2>&1 > /dev/null
		git_switch_to_master_if_branch_not_exist "${BRANCH}"
		export PMC_PLUGINS_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
		popd 2>&1 > /dev/null
	fi

	# Detect pmc-vip-go-plugins matching branch
	if [[ -d ${WEB_ROOT}/wp-content/plugins ]]; then
		echo "Switch branch '${BRANCH}' on 'pmc-vip-go-plugins'"
		pushd ${WEB_ROOT}/wp-content/plugins 2>&1 > /dev/null
		git_switch_to_master_if_branch_not_exist "${BRANCH}"
		popd 2>&1 > /dev/null
	fi
}

function maybe_build_pmc_plugins_js_checklist {
	IFS=$'\n';
	echo -e "PMC_PLUGINS_JS_CHECKLIST:\n ${PMC_PLUGINS_JS_CHECKLIST[*]}"
	echo -e "JS_FILES:\n ${JS_FILES[*]}"

  if [[ -n "${PMC_PLUGINS_JS_CHECKLIST}" || -z "${JS_FILES}" || 'pmc-plugins' != "${REPO_SLUG}" ]]; then
    return
  fi

  PMC_PLUGINS_JS_CHECKLIST=()
  # Loop through changed js files in commit
  for i in "${JS_FILES[@]}"
    do
      # Build array of unique directories from git
      BASE_PLUGIN_DIRECTORY=$(echo "${i}" | cut -d "/" -f1)
      # Check if directory is already in array and if not add it to the array
      if [[ ! " ${PMC_PLUGINS_JS_CHECKLIST[@]} " =~ " ${BASE_PLUGIN_DIRECTORY} " ]]
        then
          echo -e "${BLUE}${INFO}${RESET} Adding directory ${LIGHT_RED}${BASE_PLUGIN_DIRECTORY}${RESET} to build js check list"
          PMC_PLUGINS_JS_CHECKLIST+=("${BASE_PLUGIN_DIRECTORY}")
      fi
  done

  export PMC_PLUGINS_JS_CHECKLIST=${PMC_PLUGINS_JS_CHECKLIST}
  export PMC_IS_PMC_PLUGINS=true

}

function maybe_copy_artifacts {
  if  [[ -z ${PMC_ARTIFACTS} || false == ${PMC_ARTIFACTS} ]]
    then
      return
  fi
  if [[ true == ${PMC_ARTIFACTS} ]]
    then
      if [[ $PWD =~ pmc-plugins/ ]]
        then
          PMC_ARTIFACTS=${PWD%/*}/artifacts
        else
          PMC_ARTIFACTS=${PWD}/artifacts
      fi
  fi
  mkdir -p $PMC_ARTIFACTS
  cp $1 $PMC_ARTIFACTS
  echo "copy artifacts: $1 -> $PMC_ARTIFACTS"
}

function git_checkout {
  local TARGET=${1}
  local SOURCE=${2}
  local DEPTH=${3}

  if [[ ! "${SOURCE}" =~ ".git" ]]; then
    echo_error 'Unknown git repository "${SOURCE}"'
    return 1
  fi

  echo_info "git checkout ${TARGET}"
  mkdir -p ${TARGET}
  pushd ${TARGET} 2>&1 > /dev/null

  git config --global --add safe.directory $( pwd )

  if [ ! -d ${TARGET}/.git ]; then
    if [[ -z "${DEPTH}" || "0" == "${DEPTH}" ]]; then
      git clone --quiet --recursive --bare ${SOURCE} .git
    else
      git clone --quiet -b $(pmc_get_git_default_branch ${SOURCE}) --depth ${DEPTH} --recursive --bare ${SOURCE} .git
    fi
    git config --unset core.bare
    git reset --hard
  else
    git pull --quiet
  fi
  popd 2>&1 > /dev/null

  if [ -d ${TARGET}/.git ]; then
    echo_ok "${TARGET}\n"
  else
    echo_error "${TARGET}"
  fi
}

function checkout_dependencies {
	local THEME="$1"

  THEME_PARENT="$(get_parent_wp_theme "${THEME}" 1)"

  if [[ -n "${THEME_PARENT}" ]]; then
    if [[ "${THEME_PARENT}" == vip/* ]]; then
      THEME_PARENT=$(echo "${THEME_PARENT}" | cut -d'/' -f2)
      git_checkout ${WP_THEME_FOLDER}/vip/${THEME_PARENT} git@github.com:penske-media-corp/${THEME_PARENT}.git 1
    else
      git_checkout ${WP_THEME_FOLDER}/${THEME_PARENT} git@github.com:penske-media-corp/${THEME_PARENT}.git 1
    fi
  fi

  git_checkout ${WEB_ROOT}/wp-content/plugins/pmc-plugins git@github.com:penske-media-corp/pmc-plugins.git 1
}

function get_parent_wp_theme {
  local THEME="$1"
  local SKIP_EXISTENCE_CHECK="$2"

  if [[ -z "${THEME}" || "." == "${THEME}" ]]; then
    local CSS_FILE="$(pwd)/style.css"
  else
    local CSS_FILE="${WP_THEME_FOLDER}/${THEME}/style.css"
  fi
  if [[ -f ${CSS_FILE} ]]; then
    local P_THEME="$(grep "Template:" ${CSS_FILE} | tr "\n\r" "  " | sed -e 's/.*Template:\s*//g' | tr -d '[:space:]')"

    if [[ -n "${SKIP_EXISTENCE_CHECK}" ]]; then
      echo "${P_THEME}"
    elif [[ -f ${WP_THEME_FOLDER}/${P_THEME}/style.css ]]; then
      echo "${P_THEME}"
    fi
  fi
}

# TODO: can these use the colors shorthand from `pmc-setup-colors`?
function echo_error {
  local PREFIX="ERROR: "

  if [ "0" == "$2" ]; then
    PREFIX=""
  fi

  printf "\e[1m\e[31m${PREFIX}${1}\e[0m\n" 1>&2

  ERRORS[${#ERRORS[*]}]=${1}
}

function echo_warning {
  local PREFIX="WARNING: "

  if [ "0" == "$2" ]; then
    PREFIX=""
  fi

  printf "\e[33m${PREFIX}${1}\e[0m\n" 1>&2

}

function echo_ok {
  local PREFIX="OK: "

  if [ "0" == "$2" ]; then
    PREFIX=""
  fi

  printf "\e[1m\e[32m${PREFIX}${1}\e[0m\n" 1>&2
}

function echo_info {
  printf "\e[32m${1}\e[0m\n" 1>&2
}
